node {
    // Specify the Node.js tool
    def nodeTool = tool name: 'nodejs'
    environment{
       DOCKER_USERNAME="saritha752"
       DOCKER_PASSWORD="Hani@1234" 
       KUBECONFIG = '/home/jenkins/.kube/config'  // adjust as needed
    }
    try {
        stage('Git checkout') {
            echo 'Hello'
            git url:"https://github.com/Sarithacs07/course_app.git",branch:"main"
        }

        stage('Node install') {
            // Use the Node.js tool for the npm commands
            withEnv(["PATH+NODE=${nodeTool}/bin"]) {
                sh 'npm install'
            }
        }

        stage('Node build') {
            withEnv(["PATH+NODE=${nodeTool}/bin"]) {
                sh 'npm run build'
            }
        }
        stage('Build Docker Image') {
           env.PATH = "/usr/local/bin:${env.PATH}"
           sh 'docker build -t saritha752/honeycedu:latest .'
           }
        
        stage('Push Docker Image') {
         env.PATH = "/usr/local/bin:${env.PATH}"
         withCredentials([usernamePassword(credentialsId: '70052536-5c15-4d30-ab46-bb4f5954ed5b', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
         sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
         sh 'docker push $DOCKER_USERNAME/honeycedu:latest'
        }
      }   
        stage('Helm Setup') {
sh 'curl -fsSL https://get.helm.sh/helm-v3.9.1-linux-amd64.tar.gz -o helm.tar.gz'

                    // Extract the Helm binary
                    sh 'tar -zxvf helm.tar.gz'

                    // Create the target directory if it does not exist
                    sh 'mkdir -p $HOME/.local/bin'

                    // Move Helm binary to ~/.local/bin directory
                    sh 'mv linux-amd64/helm $HOME/.local/bin/helm'

                    // Update PATH to include ~/.local/bin
                    sh 'echo "export PATH=$HOME/.local/bin:$PATH" >> ~/.bashrc'

                    // Verify Helm installation
                    sh 'helm version'
        }

        stage('Helm Init') {
                    // Initialize Helm (if necessary, for Helm 2.x or if using Helm 3 without Tiller)
                    sh 'helm repo add stable https://charts.helm.sh/stable'
                    sh 'helm repo update'
            }

        stage('Deploy with Helm') {
                    sh '''
                   helm package honeyedu
                   helm upgrade prod-release honeyedu-0.1.0.tgz
                   '''
                }
        
        stage('Verify Deployment') {
                    // Check the status of the deployed release
                    sh 'helm status prod-release'
                }
     }
                
     catch (Exception e) {
             echo "An error occurred: ${e.message}"
            currentBuild.result = 'FAILURE'
        // Optionally, you can add cleanup or additional error handling here
    } finally {
        // This block will always run, regardless of success or failure
        echo 'Cleaning up...'
    }
}